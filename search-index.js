var searchIndex = {};
searchIndex['bitstream'] = {"items":[[0,"","bitstream","",null,null],[0,"reader","","",null,null],[3,"BitReader","bitstream::reader","`BitReader` reads an input stream as a stream of bits (instead of the normal byte-level).",null,null],[4,"Error","","",null,null],[13,"UnexpectedEOF","","",0,null],[13,"Io","","",0,null],[4,"LittleEndian","","",null,null],[4,"BigEndian","","",null,null],[6,"Result","","",null,null],[8,"Endianess","","A trait for handling endian-specific operations",null,null],[10,"swap","","",1,{"inputs":[{"name":"endianess"},{"name":"usize"}],"output":{"name":"usize"}}],[10,"get_bits","","",1,{"inputs":[{"name":"endianess"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[10,"combine_words","","",1,{"inputs":[{"name":"endianess"},{"name":"usize"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"swap","","",2,{"inputs":[{"name":"littleendian"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"get_bits","","",2,{"inputs":[{"name":"littleendian"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"combine_words","","",2,{"inputs":[{"name":"littleendian"},{"name":"usize"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"swap","","",3,{"inputs":[{"name":"bigendian"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"get_bits","","",3,{"inputs":[{"name":"bigendian"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"combine_words","","",3,{"inputs":[{"name":"bigendian"},{"name":"usize"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"new","","",4,{"inputs":[{"name":"bitreader"},{"name":"r"}],"output":{"name":"bitreader"}}],[11,"with_buffer_size","","",4,{"inputs":[{"name":"bitreader"},{"name":"r"},{"name":"u32"}],"output":{"name":"bitreader"}}],[11,"read_usize","","Reads `bits` bits into a `usize`.\nPanics if `bits` is greater than the number of bits in a `usize`",4,{"inputs":[{"name":"bitreader"},{"name":"u8"}],"output":{"name":"result"}}],[11,"read_isize","","Reads `bits` bits into an `isize`.\nPanics if `bits` is greater than the number of bits in a `isize`",4,{"inputs":[{"name":"bitreader"},{"name":"u8"}],"output":{"name":"result"}}],[11,"read_u64","","Reads `bits` bits into a `u64`.\nPanics if `bits` is greater than the number of bits in a `u64`",4,{"inputs":[{"name":"bitreader"},{"name":"u8"}],"output":{"name":"result"}}],[11,"read_i64","","Reads `bits` bits into an `i64`.\nPanics if `bits` is greater than the number of bits in a `i64`",4,{"inputs":[{"name":"bitreader"},{"name":"u8"}],"output":{"name":"result"}}],[11,"read_u32","","",4,{"inputs":[{"name":"bitreader"},{"name":"u8"}],"output":{"name":"result"}}],[11,"read_i32","","",4,{"inputs":[{"name":"bitreader"},{"name":"u8"}],"output":{"name":"result"}}],[11,"read_u16","","",4,{"inputs":[{"name":"bitreader"},{"name":"u8"}],"output":{"name":"result"}}],[11,"read_i16","","",4,{"inputs":[{"name":"bitreader"},{"name":"u8"}],"output":{"name":"result"}}],[11,"read_u8","","",4,{"inputs":[{"name":"bitreader"},{"name":"u8"}],"output":{"name":"result"}}],[11,"read_i8","","",4,{"inputs":[{"name":"bitreader"},{"name":"u8"}],"output":{"name":"result"}}],[11,"read_bit","","Read a single bit from the stream returning it as a boolean value",4,{"inputs":[{"name":"bitreader"}],"output":{"name":"result"}}],[11,"read_unary_unsigned","","Read an unsigned, unary-coded value from the bitstream. This uses one-terminated encoding.\nFor example: the number `6` is encoded as `0000001`",4,{"inputs":[{"name":"bitreader"}],"output":{"name":"result"}}],[11,"skip_to_byte","","Advances the reader such that the next bits will be from the start of a byte boundary.  If\nthe reader is already on a byte boundary, nothing is changed.",4,{"inputs":[{"name":"bitreader"}],"output":null}],[11,"drop","","",4,{"inputs":[{"name":"bitreader"}],"output":null}]],"paths":[[4,"Error"],[8,"Endianess"],[4,"LittleEndian"],[4,"BigEndian"],[3,"BitReader"]]};
initSearch(searchIndex);
